
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file Employee.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using EmployeeDB.BLL.Validation;
#endregion

namespace EmployeeDB.BLL
{
	///<summary>
	/// An object representation of the 'Employee' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EmployeeBase : EntityBase, IEmployee, IEntityId<EmployeeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EmployeeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EmployeeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EmployeeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Employee> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EmployeeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EmployeeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EmployeeBase"/> instance.
		///</summary>
		public EmployeeBase()
		{
			this.entityData = new EmployeeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EmployeeBase"/> instance.
		///</summary>
		///<param name="_employeeCode"></param>
		///<param name="_fullName"></param>
		///<param name="_firstName"></param>
		///<param name="_middlesName"></param>
		///<param name="_lastName"></param>
		///<param name="_dOB"></param>
		///<param name="_email"></param>
		///<param name="_bio"></param>
		///<param name="_createdOn"></param>
		public EmployeeBase(System.String _employeeCode, System.String _fullName, System.String _firstName, 
			System.String _middlesName, System.String _lastName, System.DateTime? _dOB, System.String _email, 
			System.String _bio, System.DateTime? _createdOn)
		{
			this.entityData = new EmployeeEntityData();
			this.backupData = null;

			this.EmployeeCode = _employeeCode;
			this.FullName = _fullName;
			this.FirstName = _firstName;
			this.MiddlesName = _middlesName;
			this.LastName = _lastName;
			this.DOB = _dOB;
			this.Email = _email;
			this.Bio = _bio;
			this.CreatedOn = _createdOn;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Employee"/> instance.
		///</summary>
		///<param name="_employeeCode"></param>
		///<param name="_fullName"></param>
		///<param name="_firstName"></param>
		///<param name="_middlesName"></param>
		///<param name="_lastName"></param>
		///<param name="_dOB"></param>
		///<param name="_email"></param>
		///<param name="_bio"></param>
		///<param name="_createdOn"></param>
		public static Employee CreateEmployee(System.String _employeeCode, System.String _fullName, System.String _firstName, 
			System.String _middlesName, System.String _lastName, System.DateTime? _dOB, System.String _email, 
			System.String _bio, System.DateTime? _createdOn)
		{
			Employee newEmployee = new Employee();
			newEmployee.EmployeeCode = _employeeCode;
			newEmployee.FullName = _fullName;
			newEmployee.FirstName = _firstName;
			newEmployee.MiddlesName = _middlesName;
			newEmployee.LastName = _lastName;
			newEmployee.DOB = _dOB;
			newEmployee.Email = _email;
			newEmployee.Bio = _bio;
			newEmployee.CreatedOn = _createdOn;
			return newEmployee;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EmployeeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 EmployeeId
		{
			get
			{
				return this.entityData.EmployeeId; 
			}
			
			set
			{
				if (this.entityData.EmployeeId == value)
					return;
				
                OnPropertyChanging("EmployeeId");                    
				OnColumnChanging(EmployeeColumn.EmployeeId, this.entityData.EmployeeId);
				this.entityData.EmployeeId = value;
				this.EntityId.EmployeeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.EmployeeId, this.entityData.EmployeeId);
				OnPropertyChanged("EmployeeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmployeeCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String EmployeeCode
		{
			get
			{
				return this.entityData.EmployeeCode; 
			}
			
			set
			{
				if (this.entityData.EmployeeCode == value)
					return;
				
                OnPropertyChanging("EmployeeCode");                    
				OnColumnChanging(EmployeeColumn.EmployeeCode, this.entityData.EmployeeCode);
				this.entityData.EmployeeCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.EmployeeCode, this.entityData.EmployeeCode);
				OnPropertyChanged("EmployeeCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String FullName
		{
			get
			{
				return this.entityData.FullName; 
			}
			
			set
			{
				if (this.entityData.FullName == value)
					return;
				
                OnPropertyChanging("FullName");                    
				OnColumnChanging(EmployeeColumn.FullName, this.entityData.FullName);
				this.entityData.FullName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.FullName, this.entityData.FullName);
				OnPropertyChanged("FullName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
				
                OnPropertyChanging("FirstName");                    
				OnColumnChanging(EmployeeColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MiddlesName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String MiddlesName
		{
			get
			{
				return this.entityData.MiddlesName; 
			}
			
			set
			{
				if (this.entityData.MiddlesName == value)
					return;
				
                OnPropertyChanging("MiddlesName");                    
				OnColumnChanging(EmployeeColumn.MiddlesName, this.entityData.MiddlesName);
				this.entityData.MiddlesName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.MiddlesName, this.entityData.MiddlesName);
				OnPropertyChanged("MiddlesName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
				
                OnPropertyChanging("LastName");                    
				OnColumnChanging(EmployeeColumn.LastName, this.entityData.LastName);
				this.entityData.LastName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.LastName, this.entityData.LastName);
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DOB property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DOB
		{
			get
			{
				return this.entityData.DOB; 
			}
			
			set
			{
				if (this.entityData.DOB == value)
					return;
				
                OnPropertyChanging("DOB");                    
				OnColumnChanging(EmployeeColumn.DOB, this.entityData.DOB);
				this.entityData.DOB = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.DOB, this.entityData.DOB);
				OnPropertyChanged("DOB");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
				
                OnPropertyChanging("Email");                    
				OnColumnChanging(EmployeeColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Bio property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Bio
		{
			get
			{
				return this.entityData.Bio; 
			}
			
			set
			{
				if (this.entityData.Bio == value)
					return;
				
                OnPropertyChanging("Bio");                    
				OnColumnChanging(EmployeeColumn.Bio, this.entityData.Bio);
				this.entityData.Bio = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.Bio, this.entityData.Bio);
				OnPropertyChanged("Bio");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedOn property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedOn
		{
			get
			{
				return this.entityData.CreatedOn; 
			}
			
			set
			{
				if (this.entityData.CreatedOn == value)
					return;
				
                OnPropertyChanging("CreatedOn");                    
				OnColumnChanging(EmployeeColumn.CreatedOn, this.entityData.CreatedOn);
				this.entityData.CreatedOn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeeColumn.CreatedOn, this.entityData.CreatedOn);
				OnPropertyChanged("CreatedOn");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EmployeeSkills objects
		///	which are related to this object through the relation FK_EmployeeSkills_Employee
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EmployeeSkills> EmployeeSkillsCollection
		{
			get { return entityData.EmployeeSkillsCollection; }
			set { entityData.EmployeeSkillsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EmployeeDepartments objects
		///	which are related to this object through the relation FK_EmployeeDepartments_Employee
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EmployeeDepartments> EmployeeDepartmentsCollection
		{
			get { return entityData.EmployeeDepartmentsCollection; }
			set { entityData.EmployeeDepartmentsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EmployeeSalary objects
		///	which are related to this object through the relation FK_EmployeeSalary_Employee
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EmployeeSalary> EmployeeSalaryCollection
		{
			get { return entityData.EmployeeSalaryCollection; }
			set { entityData.EmployeeSalaryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Address objects
		///	which are related to this object through the relation FK_Address_Employee
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Address> AddressCollection
		{
			get { return entityData.AddressCollection; }
			set { entityData.AddressCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of BankAccounts objects
		///	which are related to this object through the relation FK_BankAccounts_Employee
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<BankAccounts> BankAccountsCollection
		{
			get { return entityData.BankAccountsCollection; }
			set { entityData.BankAccountsCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmployeeCode", "Employee Code", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FullName", "Full Name", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FirstName", "First Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MiddlesName", "Middles Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LastName", "Last Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Employee"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"EmployeeId", "EmployeeCode", "FullName", "FirstName", "MiddlesName", "LastName", "DOB", "Email", "Bio", "CreatedOn"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EmployeeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Employee) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Employee>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Employee);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Employee Entity 
		///</summary>
		protected virtual Employee Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Employee copy = new Employee();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EmployeeId = this.EmployeeId;
				copy.EmployeeCode = this.EmployeeCode;
				copy.FullName = this.FullName;
				copy.FirstName = this.FirstName;
				copy.MiddlesName = this.MiddlesName;
				copy.LastName = this.LastName;
				copy.DOB = this.DOB;
				copy.Email = this.Email;
				copy.Bio = this.Bio;
				copy.CreatedOn = this.CreatedOn;
			
		
			//deep copy nested objects
			copy.EmployeeSkillsCollection = (TList<EmployeeSkills>) MakeCopyOf(this.EmployeeSkillsCollection, existingCopies); 
			copy.EmployeeDepartmentsCollection = (TList<EmployeeDepartments>) MakeCopyOf(this.EmployeeDepartmentsCollection, existingCopies); 
			copy.EmployeeSalaryCollection = (TList<EmployeeSalary>) MakeCopyOf(this.EmployeeSalaryCollection, existingCopies); 
			copy.AddressCollection = (TList<Address>) MakeCopyOf(this.AddressCollection, existingCopies); 
			copy.BankAccountsCollection = (TList<BankAccounts>) MakeCopyOf(this.BankAccountsCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Employee Entity 
		///</summary>
		public virtual Employee Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Employee Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Employee DeepCopy()
		{
			return EntityHelper.Clone<Employee>(this as Employee);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EmployeeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EmployeeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EmployeeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EmployeeColumn column)
		{
			switch(column)
			{
					case EmployeeColumn.EmployeeId:
					return entityData.EmployeeId != _originalData.EmployeeId;
					case EmployeeColumn.EmployeeCode:
					return entityData.EmployeeCode != _originalData.EmployeeCode;
					case EmployeeColumn.FullName:
					return entityData.FullName != _originalData.FullName;
					case EmployeeColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case EmployeeColumn.MiddlesName:
					return entityData.MiddlesName != _originalData.MiddlesName;
					case EmployeeColumn.LastName:
					return entityData.LastName != _originalData.LastName;
					case EmployeeColumn.DOB:
					return entityData.DOB != _originalData.DOB;
					case EmployeeColumn.Email:
					return entityData.Email != _originalData.Email;
					case EmployeeColumn.Bio:
					return entityData.Bio != _originalData.Bio;
					case EmployeeColumn.CreatedOn:
					return entityData.CreatedOn != _originalData.CreatedOn;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EmployeeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EmployeeId != _originalData.EmployeeId;
			result = result || entityData.EmployeeCode != _originalData.EmployeeCode;
			result = result || entityData.FullName != _originalData.FullName;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.MiddlesName != _originalData.MiddlesName;
			result = result || entityData.LastName != _originalData.LastName;
			result = result || entityData.DOB != _originalData.DOB;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.Bio != _originalData.Bio;
			result = result || entityData.CreatedOn != _originalData.CreatedOn;
			return result;
		}	
		
		///<summary>
		///  Returns a Employee Entity with the original data.
		///</summary>
		public Employee GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEmployee(
				_originalData.EmployeeCode,
				_originalData.FullName,
				_originalData.FirstName,
				_originalData.MiddlesName,
				_originalData.LastName,
				_originalData.DOB,
				_originalData.Email,
				_originalData.Bio,
				_originalData.CreatedOn
				);
				
			return (Employee)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EmployeeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EmployeeBase)
				return ValueEquals(this, (EmployeeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EmployeeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EmployeeId.GetHashCode() ^ 
					((this.EmployeeCode == null) ? string.Empty : this.EmployeeCode.ToString()).GetHashCode() ^ 
					((this.FullName == null) ? string.Empty : this.FullName.ToString()).GetHashCode() ^ 
					((this.FirstName == null) ? string.Empty : this.FirstName.ToString()).GetHashCode() ^ 
					((this.MiddlesName == null) ? string.Empty : this.MiddlesName.ToString()).GetHashCode() ^ 
					((this.LastName == null) ? string.Empty : this.LastName.ToString()).GetHashCode() ^ 
					((this.DOB == null) ? string.Empty : this.DOB.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.Bio == null) ? string.Empty : this.Bio.ToString()).GetHashCode() ^ 
					((this.CreatedOn == null) ? string.Empty : this.CreatedOn.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EmployeeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EmployeeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EmployeeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EmployeeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EmployeeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EmployeeBase Object1, EmployeeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EmployeeId != Object2.EmployeeId)
				equal = false;
			if ( Object1.EmployeeCode != null && Object2.EmployeeCode != null )
			{
				if (Object1.EmployeeCode != Object2.EmployeeCode)
					equal = false;
			}
			else if (Object1.EmployeeCode == null ^ Object2.EmployeeCode == null )
			{
				equal = false;
			}
			if ( Object1.FullName != null && Object2.FullName != null )
			{
				if (Object1.FullName != Object2.FullName)
					equal = false;
			}
			else if (Object1.FullName == null ^ Object2.FullName == null )
			{
				equal = false;
			}
			if ( Object1.FirstName != null && Object2.FirstName != null )
			{
				if (Object1.FirstName != Object2.FirstName)
					equal = false;
			}
			else if (Object1.FirstName == null ^ Object2.FirstName == null )
			{
				equal = false;
			}
			if ( Object1.MiddlesName != null && Object2.MiddlesName != null )
			{
				if (Object1.MiddlesName != Object2.MiddlesName)
					equal = false;
			}
			else if (Object1.MiddlesName == null ^ Object2.MiddlesName == null )
			{
				equal = false;
			}
			if ( Object1.LastName != null && Object2.LastName != null )
			{
				if (Object1.LastName != Object2.LastName)
					equal = false;
			}
			else if (Object1.LastName == null ^ Object2.LastName == null )
			{
				equal = false;
			}
			if ( Object1.DOB != null && Object2.DOB != null )
			{
				if (Object1.DOB != Object2.DOB)
					equal = false;
			}
			else if (Object1.DOB == null ^ Object2.DOB == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.Bio != null && Object2.Bio != null )
			{
				if (Object1.Bio != Object2.Bio)
					equal = false;
			}
			else if (Object1.Bio == null ^ Object2.Bio == null )
			{
				equal = false;
			}
			if ( Object1.CreatedOn != null && Object2.CreatedOn != null )
			{
				if (Object1.CreatedOn != Object2.CreatedOn)
					equal = false;
			}
			else if (Object1.CreatedOn == null ^ Object2.CreatedOn == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EmployeeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EmployeeComparer GetComparer()
        {
            return new EmployeeComparer();
        }
        */

        // Comparer delegates back to Employee
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Employee rhs, EmployeeColumn which)
        {
            switch (which)
            {
            	
            	
            	case EmployeeColumn.EmployeeId:
            		return this.EmployeeId.CompareTo(rhs.EmployeeId);
            		
            		                 
            	
            	
            	case EmployeeColumn.EmployeeCode:
            		return this.EmployeeCode.CompareTo(rhs.EmployeeCode);
            		
            		                 
            	
            	
            	case EmployeeColumn.FullName:
            		return this.FullName.CompareTo(rhs.FullName);
            		
            		                 
            	
            	
            	case EmployeeColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case EmployeeColumn.MiddlesName:
            		return this.MiddlesName.CompareTo(rhs.MiddlesName);
            		
            		                 
            	
            	
            	case EmployeeColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case EmployeeColumn.DOB:
            		return this.DOB.Value.CompareTo(rhs.DOB.Value);
            		
            		                 
            	
            	
            	case EmployeeColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case EmployeeColumn.Bio:
            		return this.Bio.CompareTo(rhs.Bio);
            		
            		                 
            	
            	
            	case EmployeeColumn.CreatedOn:
            		return this.CreatedOn.Value.CompareTo(rhs.CreatedOn.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EmployeeKey> Members
		
		// member variable for the EntityId property
		private EmployeeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EmployeeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EmployeeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Employee")
					.Append("|").Append( this.EmployeeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- EmployeeId: {0}{10}- EmployeeCode: {1}{10}- FullName: {2}{10}- FirstName: {3}{10}- MiddlesName: {4}{10}- LastName: {5}{10}- DOB: {6}{10}- Email: {7}{10}- Bio: {8}{10}- CreatedOn: {9}{10}{12}", 
				this.EmployeeId,
				(this.EmployeeCode == null) ? string.Empty : this.EmployeeCode.ToString(),
				(this.FullName == null) ? string.Empty : this.FullName.ToString(),
				(this.FirstName == null) ? string.Empty : this.FirstName.ToString(),
				(this.MiddlesName == null) ? string.Empty : this.MiddlesName.ToString(),
				(this.LastName == null) ? string.Empty : this.LastName.ToString(),
				(this.DOB == null) ? string.Empty : this.DOB.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.Bio == null) ? string.Empty : this.Bio.ToString(),
				(this.CreatedOn == null) ? string.Empty : this.CreatedOn.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Employee' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EmployeeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// EmployeeId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Employee"</remarks>
		public System.Int32 EmployeeId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// EmployeeCode : 
		/// </summary>
		public System.String EmployeeCode = null;
		
		/// <summary>
		/// FullName : 
		/// </summary>
		public System.String FullName = null;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		public System.String FirstName = null;
		
		/// <summary>
		/// MiddlesName : 
		/// </summary>
		public System.String MiddlesName = null;
		
		/// <summary>
		/// LastName : 
		/// </summary>
		public System.String LastName = null;
		
		/// <summary>
		/// DOB : 
		/// </summary>
		public System.DateTime? DOB = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String Email = null;
		
		/// <summary>
		/// Bio : 
		/// </summary>
		public System.String Bio = null;
		
		/// <summary>
		/// CreatedOn : 
		/// </summary>
		public System.DateTime? CreatedOn = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region EmployeeSkillsCollection
		
		private TList<EmployeeSkills> _employeeSkillsEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeSkillsEmployeeId
		/// </summary>
		
		public TList<EmployeeSkills> EmployeeSkillsCollection
		{
			get
			{
				if (_employeeSkillsEmployeeId == null)
				{
				_employeeSkillsEmployeeId = new TList<EmployeeSkills>();
				}
	
				return _employeeSkillsEmployeeId;
			}
			set { _employeeSkillsEmployeeId = value; }
		}
		
		#endregion

		#region EmployeeDepartmentsCollection
		
		private TList<EmployeeDepartments> _employeeDepartmentsEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeDepartmentsEmployeeId
		/// </summary>
		
		public TList<EmployeeDepartments> EmployeeDepartmentsCollection
		{
			get
			{
				if (_employeeDepartmentsEmployeeId == null)
				{
				_employeeDepartmentsEmployeeId = new TList<EmployeeDepartments>();
				}
	
				return _employeeDepartmentsEmployeeId;
			}
			set { _employeeDepartmentsEmployeeId = value; }
		}
		
		#endregion

		#region EmployeeSalaryCollection
		
		private TList<EmployeeSalary> _employeeSalaryEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeSalaryEmployeeId
		/// </summary>
		
		public TList<EmployeeSalary> EmployeeSalaryCollection
		{
			get
			{
				if (_employeeSalaryEmployeeId == null)
				{
				_employeeSalaryEmployeeId = new TList<EmployeeSalary>();
				}
	
				return _employeeSalaryEmployeeId;
			}
			set { _employeeSalaryEmployeeId = value; }
		}
		
		#endregion

		#region AddressCollection
		
		private TList<Address> _addressEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _addressEmployeeId
		/// </summary>
		
		public TList<Address> AddressCollection
		{
			get
			{
				if (_addressEmployeeId == null)
				{
				_addressEmployeeId = new TList<Address>();
				}
	
				return _addressEmployeeId;
			}
			set { _addressEmployeeId = value; }
		}
		
		#endregion

		#region BankAccountsCollection
		
		private TList<BankAccounts> _bankAccountsEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _bankAccountsEmployeeId
		/// </summary>
		
		public TList<BankAccounts> BankAccountsCollection
		{
			get
			{
				if (_bankAccountsEmployeeId == null)
				{
				_bankAccountsEmployeeId = new TList<BankAccounts>();
				}
	
				return _bankAccountsEmployeeId;
			}
			set { _bankAccountsEmployeeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EmployeeEntityData _tmp = new EmployeeEntityData();
						
			_tmp.EmployeeId = this.EmployeeId;
			
			_tmp.EmployeeCode = this.EmployeeCode;
			_tmp.FullName = this.FullName;
			_tmp.FirstName = this.FirstName;
			_tmp.MiddlesName = this.MiddlesName;
			_tmp.LastName = this.LastName;
			_tmp.DOB = this.DOB;
			_tmp.Email = this.Email;
			_tmp.Bio = this.Bio;
			_tmp.CreatedOn = this.CreatedOn;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._employeeSkillsEmployeeId != null)
				_tmp.EmployeeSkillsCollection = (TList<EmployeeSkills>) MakeCopyOf(this.EmployeeSkillsCollection); 
			if (this._employeeDepartmentsEmployeeId != null)
				_tmp.EmployeeDepartmentsCollection = (TList<EmployeeDepartments>) MakeCopyOf(this.EmployeeDepartmentsCollection); 
			if (this._employeeSalaryEmployeeId != null)
				_tmp.EmployeeSalaryCollection = (TList<EmployeeSalary>) MakeCopyOf(this.EmployeeSalaryCollection); 
			if (this._addressEmployeeId != null)
				_tmp.AddressCollection = (TList<Address>) MakeCopyOf(this.AddressCollection); 
			if (this._bankAccountsEmployeeId != null)
				_tmp.BankAccountsCollection = (TList<BankAccounts>) MakeCopyOf(this.BankAccountsCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EmployeeEntityData _tmp = new EmployeeEntityData();
						
			_tmp.EmployeeId = this.EmployeeId;
			
			_tmp.EmployeeCode = this.EmployeeCode;
			_tmp.FullName = this.FullName;
			_tmp.FirstName = this.FirstName;
			_tmp.MiddlesName = this.MiddlesName;
			_tmp.LastName = this.LastName;
			_tmp.DOB = this.DOB;
			_tmp.Email = this.Email;
			_tmp.Bio = this.Bio;
			_tmp.CreatedOn = this.CreatedOn;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EmployeeSkillsCollection = (TList<EmployeeSkills>) MakeCopyOf(this.EmployeeSkillsCollection, existingCopies); 
			_tmp.EmployeeDepartmentsCollection = (TList<EmployeeDepartments>) MakeCopyOf(this.EmployeeDepartmentsCollection, existingCopies); 
			_tmp.EmployeeSalaryCollection = (TList<EmployeeSalary>) MakeCopyOf(this.EmployeeSalaryCollection, existingCopies); 
			_tmp.AddressCollection = (TList<Address>) MakeCopyOf(this.AddressCollection, existingCopies); 
			_tmp.BankAccountsCollection = (TList<BankAccounts>) MakeCopyOf(this.BankAccountsCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EmployeeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EmployeeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EmployeeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				EmployeeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EmployeeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EmployeeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EmployeeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EmployeeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EmployeeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Employee"/> object.
	/// </remarks>
	public class EmployeeEventArgs : System.EventArgs
	{
		private EmployeeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EmployeeEventArgs class.
		///</summary>
		public EmployeeEventArgs(EmployeeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EmployeeEventArgs class.
		///</summary>
		public EmployeeEventArgs(EmployeeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EmployeeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EmployeeColumn" />
		public EmployeeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Employee related events.
	///</summary>
	public delegate void EmployeeEventHandler(object sender, EmployeeEventArgs e);
	
	#region EmployeeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EmployeeComparer : System.Collections.Generic.IComparer<Employee>
	{
		EmployeeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EmployeeComparer"/> class.
        /// </summary>
		public EmployeeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EmployeeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EmployeeComparer(EmployeeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Employee"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Employee"/> to compare.</param>
        /// <param name="b">The second <c>Employee</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Employee a, Employee b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Employee entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Employee a, Employee b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EmployeeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EmployeeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Employee"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EmployeeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EmployeeKey class.
		/// </summary>
		public EmployeeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EmployeeKey class.
		/// </summary>
		public EmployeeKey(EmployeeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EmployeeId = entity.EmployeeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EmployeeKey class.
		/// </summary>
		public EmployeeKey(System.Int32 _employeeId)
		{
			#region Init Properties

			this.EmployeeId = _employeeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EmployeeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EmployeeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EmployeeId property
		private System.Int32 _employeeId;
		
		/// <summary>
		/// Gets or sets the EmployeeId property.
		/// </summary>
		public System.Int32 EmployeeId
		{
			get { return _employeeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EmployeeId = value;
				
				_employeeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EmployeeId = ( values["EmployeeId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["EmployeeId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EmployeeId", EmployeeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EmployeeId: {0}{1}",
								EmployeeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EmployeeColumn Enum
	
	/// <summary>
	/// Enumerate the Employee columns.
	/// </summary>
	[Serializable]
	public enum EmployeeColumn : int
	{
		/// <summary>
		/// EmployeeId : 
		/// </summary>
		[EnumTextValue("Employee Id")]
		[ColumnEnum("EmployeeId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		EmployeeId = 1,
		/// <summary>
		/// EmployeeCode : 
		/// </summary>
		[EnumTextValue("Employee Code")]
		[ColumnEnum("EmployeeCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		EmployeeCode = 2,
		/// <summary>
		/// FullName : 
		/// </summary>
		[EnumTextValue("Full Name")]
		[ColumnEnum("FullName", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		FullName = 3,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("First Name")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		FirstName = 4,
		/// <summary>
		/// MiddlesName : 
		/// </summary>
		[EnumTextValue("Middles Name")]
		[ColumnEnum("MiddlesName", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		MiddlesName = 5,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("Last Name")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		LastName = 6,
		/// <summary>
		/// DOB : 
		/// </summary>
		[EnumTextValue("DOB")]
		[ColumnEnum("DOB", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DOB = 7,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Email = 8,
		/// <summary>
		/// Bio : 
		/// </summary>
		[EnumTextValue("Bio")]
		[ColumnEnum("Bio", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Bio = 9,
		/// <summary>
		/// CreatedOn : 
		/// </summary>
		[EnumTextValue("Created On")]
		[ColumnEnum("CreatedOn", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedOn = 10
	}//End enum

	#endregion EmployeeColumn Enum

} // end namespace
